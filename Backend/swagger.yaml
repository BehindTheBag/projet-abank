swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http

# définition des endpoints 
paths:
  /user/login:
    post:
      tags: [User Module]
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces: [application/json]
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'  
          examples:
            application/json:
              status: 200
              message: "Login success"
              body:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.xxx.yyy"
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

  /user/signup:
    post:
      tags: [User Module]
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces: [application/json]
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

  /user/profile:
    get:
    # Token JWT requis 
      security: [{ Bearer: [] }]
      tags: [User Module]
      summary: User Profile API
      description: API for fetching a user profile
      responses:
        '200':
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    put:
    # Màj profil utilisateur (token requis)
      security: [{ Bearer: [] }]
      tags: [User Module]
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces: [application/json]
      responses:
        '200':
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  # Transactions (Phase 2) non implémenté 

  /user/transactions/currentMonth:
      # Définition du schéma de sécurité (token requis)
    get:
      security: [{ Bearer: [] }]
      tags: [Transactions]
      summary: List current month transactions (logged-in user)
      description: Returns the transactions of the current month for the authenticated user. Optional filter by accountId.
      parameters:
        - in: query
          name: accountId
          required: false
          type: string
          description: Optional filter by account id
      produces: [application/json]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionsResponse'
          examples:
            application/json:
              status: 200
              message: "OK"
              body:
                items:
                  - id: "txn_001"
                    accountId: "acc_001"
                    date: "2025-10-05T12:30:00Z"
                    label: "Lorem Ipsum Deli"
                    amount: 12.50
                    type: "debit"
                    category: "Food"
                    note: "lorem ipsum dolor sit amet"
                  - id: "txn_002"
                    accountId: "acc_001"
                    date: "2025-10-12T09:00:00Z"
                    label: "Dolor Sit Store"
                    amount: 49.99
                    type: "debit"
                    category: "Shopping"
                    note: "consectetur adipiscing elit"
                  - id: "txn_003"
                    accountId: "acc_001"
                    date: "2025-10-27T18:15:00Z"
                    label: "Monthly Income"
                    amount: 1500.00
                    type: "credit"
                    category: "Income"
                    note: "sed do eiusmod tempor"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /user/transactions/{transactionId}:
    get: 
    #Récupération transaction via id
      security: [{ Bearer: [] }]
      tags: [Transactions]
      summary: Get transaction details
      parameters:
        - in: path
          name: transactionId
          required: true
          type: string
      produces: [application/json]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionResponse'  
          examples:
            application/json:
              status: 200
              message: "OK"
              body:
                id: "txn_001"
                accountId: "acc_001"
                date: "2025-10-05T12:30:00Z"
                label: "Lorem Ipsum Deli"
                amount: 12.50
                type: "debit"
                category: "Food"
                note: "lorem ipsum dolor sit amet"
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found
        '500':
          description: Internal Server Error

    patch:
     #Màj divers data
      security: [{ Bearer: [] }]
      tags: [Transactions]
      summary: Update transaction metadata (category, note)
      description: Partial update of metadata only
      parameters:
        - in: path
          name: transactionId
          required: true
          type: string
        - in: body
          name: body
          description: Editable metadata only
          required: true
          schema:
            $ref: '#/definitions/TransactionUpdate'
      produces: [application/json]
      responses:
        '200':
          description: Updated
          schema:
            $ref: '#/definitions/TransactionResponse'  
          examples:
            application/json:
              status: 200
              message: "Updated"
              body:
                id: "txn_001"
                accountId: "acc_001"
                date: "2025-10-05T12:30:00Z"
                label: "Lorem Ipsum Deli"
                amount: 12.50
                type: "debit"
                category: "Food"
                note: "updated lorem ipsum"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found
        '500':
          description: Internal Server Error

# Définition chéma de sécurité (Bearer token)
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

# Définition des schémas de données
definitions:
  User:
    properties:
      email: { type: string }
      password: { type: string }
      firstName: { type: string }
      lastName: { type: string }
      userName: { type: string }

  Login:
    properties:
      email: { type: string }
      password: { type: string }

  ApiResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }
      body:
        type: object
        properties:
          id: { type: string }
          email: { type: string }
          firstName: { type: string }
          lastName: { type: string }
          userName: { type: string }

  
  LoginResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }
      body:
        type: object
        properties:
          token: { type: string }

  UserProfile:
    type: object
    properties:
      userName: { type: string }

  # transaction

  Transaction:
    type: object
    required: [id, date, label, amount, type]
    properties:
      id: { type: string }
      accountId: { type: string }
      date:
        type: string
        format: date-time         
        description: ISO date-time
      label: { type: string }
      amount: { type: number, format: float }
      type: { type: string, enum: [debit, credit] }
      category: { type: string }
      note: { type: string }

  TransactionUpdate:
    type: object
    properties:
      category: { type: string }
      note: { type: string }

  TransactionsResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }
      body:
        type: object
        properties:
          items:
            type: array
            items:
              $ref: '#/definitions/Transaction'

 
  TransactionResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }
      body:
        $ref: '#/definitions/Transaction'
